package com.pis2015.greendaodusaexamplegen;

import com.pis2015.greendaodusaexamplegen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "REPARTO".
 */
public class Reparto {

    private Long id;
    /** Not-null value. */
    private String codigo;
    private java.util.Date date;
    private long idChofer;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RepartoDao myDao;

    private Chofer chofer;
    private Long chofer__resolvedKey;


    public Reparto() {
    }

    public Reparto(Long id) {
        this.id = id;
    }

    public Reparto(Long id, String codigo, java.util.Date date, long idChofer) {
        this.id = id;
        this.codigo = codigo;
        this.date = date;
        this.idChofer = idChofer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRepartoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getCodigo() {
        return codigo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCodigo(String codigo) {
        this.codigo = codigo;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getIdChofer() {
        return idChofer;
    }

    public void setIdChofer(long idChofer) {
        this.idChofer = idChofer;
    }

    /** To-one relationship, resolved on first access. */
    public Chofer getChofer() {
        long __key = this.idChofer;
        if (chofer__resolvedKey == null || !chofer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChoferDao targetDao = daoSession.getChoferDao();
            Chofer choferNew = targetDao.load(__key);
            synchronized (this) {
                chofer = choferNew;
            	chofer__resolvedKey = __key;
            }
        }
        return chofer;
    }

    public void setChofer(Chofer chofer) {
        if (chofer == null) {
            throw new DaoException("To-one property 'idChofer' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.chofer = chofer;
            idChofer = chofer.getId();
            chofer__resolvedKey = idChofer;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
